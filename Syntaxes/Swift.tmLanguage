<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>swift</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bswift</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Swift</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#root</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>builtin-types</key>
		<dict>
			<key>comment</key>
			<string>Types provided in the standard library</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-class-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-enum-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-protocol-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-struct-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-typealias</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>builtin-class-type</key>
				<dict>
					<key>comment</key>
					<string>Builtin class types</string>
					<key>match</key>
					<string>\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b</string>
					<key>name</key>
					<string>support.class.swift</string>
				</dict>
				<key>builtin-enum-type</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Process is an enum, but it acts like a constant</string>
							<key>match</key>
							<string>\b(?:Process|CommandLine)\b</string>
							<key>name</key>
							<string>support.constant.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>The return type of a function that never returns</string>
							<key>match</key>
							<string>\bNever\b</string>
							<key>name</key>
							<string>support.constant.never.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Enum types in the standard library in Swift 3</string>
							<key>match</key>
							<string>\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Enum types in the standard library in Swift 2 only</string>
							<key>match</key>
							<string>\b(?:MirrorDisposition|QuickLookObject)\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
					</array>
				</dict>
				<key>builtin-protocol-type</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Protocols in the standard library in Swift 3</string>
							<key>match</key>
							<string>\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Protocols in the standard library in Swift 2 only</string>
							<key>match</key>
							<string>\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
					</array>
				</dict>
				<key>builtin-struct-type</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Structs in the standard library in Swift 3</string>
							<key>match</key>
							<string>\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Structs in the standard library in Swift 2 only</string>
							<key>match</key>
							<string>\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
					</array>
				</dict>
				<key>builtin-typealias</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Typealiases in the standard library in Swift 3</string>
							<key>match</key>
							<string>\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Typealiases in the standard library in Swift 2 only</string>
							<key>match</key>
							<string>\b(?:Generator|PlaygroundQuickLook|UWord|Word)\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\A^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.swift</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*:</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.playground.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>///</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>^</string>
							<key>name</key>
							<string>comment.line.triple-slash.documentation.swift</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>//:</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>^</string>
							<key>name</key>
							<string>comment.line.double-slash.documentation.swift</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>^</string>
							<key>name</key>
							<string>comment.line.double-slash.swift</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>nested</key>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>compiler-control</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#)(if|elseif)\s+(false)\b.*?(?=$|//|/\*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.conditional.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.swift</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.swift</string>
					<key>end</key>
					<string>(?=^\s*(#(elseif|else|endif)\b))</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(#)(if|elseif)\s+</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.conditional.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(&amp;&amp;|\|\|)</string>
							<key>name</key>
							<string>keyword.operator.logical.swift</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(true|false)\b</string>
							<key>name</key>
							<string>constant.language.boolean.swift</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.architecture.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(arch)\s*(\()\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*(\))</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.os.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(os)\s*(\()\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*(\))</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(swift)\s*(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\))|$</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>&gt;=</string>
									<key>name</key>
									<string>keyword.operator.comparison.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b[0-9]+(?:\.[0-9]+)*\b</string>
									<key>name</key>
									<string>constant.numeric.swift</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#)(else|endif)(.*?)(?=$|//|/\*)</string>
					<key>name</key>
					<string>meta.preprocessor.conditional.swift</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.sourcelocation.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.swift</string>
						</dict>
						<key>5</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(file)\s*(:)\s*(?=")</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>support.variable.parameter.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.key-value.swift</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#literals</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(line)\s*(:)\s*([0-9]+)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>support.variable.parameter.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.key-value.swift</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.integer.swift</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>comment</key>
											<string>This should only allow strings</string>
											<key>include</key>
											<string>#literals</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
								</dict>
							</array>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.swift</string>
						</dict>
						<key>7</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#)(sourceLocation)((\()([^)]*)(\)))(.*?)(?=$|//|/\*)</string>
					<key>name</key>
					<string>meta.preprocessor.sourcelocation.swift</string>
				</dict>
			</array>
		</dict>
		<key>declarations</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#precedencegroup</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#protocol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typealias</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>function</key>
				<dict>
					<key>begin</key>
					<string>\b(func)\s+(\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+)\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})|$(?# functions in protocol declarations or generated interfaces have no body)</string>
					<key>name</key>
					<string>meta.definition.function.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#generic-parameter-list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameter-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-result</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(?:throws|rethrows)\b</string>
							<key>name</key>
							<string>keyword.control.exception.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Swift 3: generic constraints after the parameters and return type</string>
							<key>include</key>
							<string>#generic-constraints</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.function.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.function.end.swift</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.definition.function.body.swift</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#nested-braces</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<key>function-initializer</key>
				<dict>
					<key>begin</key>
					<string>\b(init[?!]?)\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})|$</string>
					<key>name</key>
					<string>meta.definition.function.initializer.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#generic-parameter-list</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameter-clause</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(?:throws|rethrows)\b</string>
							<key>name</key>
							<string>keyword.control.exception.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Swift 3: generic constraints after the parameters and return type</string>
							<key>include</key>
							<string>#generic-constraints</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.function.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.function.end.swift</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.definition.function.initializer.body.swift</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#nested-braces</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<key>function-result</key>
				<dict>
					<key>begin</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.function.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)(?=\{|\bwhere\b)|$</string>
					<key>name</key>
					<string>meta.function-result.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#available-types</string>
						</dict>
					</array>
				</dict>
				<key>generic-constraints</key>
				<dict>
					<key>begin</key>
					<string>\b(where)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.generic-constraint-introducer.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*\{|&gt;)</string>
					<key>name</key>
					<string>meta.generic-constraints.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#available-types</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.generic-constraint.same-type.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.generic-constraint.conforms-to.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(?:(==)|(:))(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
						</dict>
					</array>
				</dict>
				<key>generic-parameter-list</key>
				<dict>
					<key>begin</key>
					<string>(&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.generic-parameter-list.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(&gt;)|(?=[^\w\d&lt;&gt;\s,=&amp;`])(?# characters besides these are never valid in a generic param list -- even if it's not really a valid clause, we should stop trying to parse it if we see one of them.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.generic-parameter-list.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.generic-parameter-list.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Swift 2: constraints inside the generic param list</string>
							<key>include</key>
							<string>#generic-constraints</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.language.generic-parameter.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b((?!\d)\w[\w\d]*)\b</string>
						</dict>
					</array>
				</dict>
				<key>nested-braces</key>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-braces</string>
						</dict>
					</array>
				</dict>
				<key>operator</key>
				<dict>
					<key>begin</key>
					<string>(?x)
						\b(prefix|infix|postfix)?
						\s+
						(operator)
						\s+
						(
							(
								\.								# Dot
							  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
							  | [\x{00A1}-\x{00A7}]
							  | [\x{00A9}\x{00AB}]
							  | [\x{00AC}\x{00AE}]
							  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
							  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
							  | [\x{2030}-\x{203E}]
							  | [\x{2041}-\x{2053}]
							  | [\x{2055}-\x{205E}]
							  | [\x{2190}-\x{23FF}]
							  | [\x{2500}-\x{2775}]
							  | [\x{2794}-\x{2BFF}]
							  | [\x{2E00}-\x{2E7F}]
							  | [\x{3001}-\x{3003}]
							  | [\x{3008}-\x{3030}]
					  
							  | [\x{0300}-\x{036F}]				# operator-character
							  | [\x{1DC0}-\x{1DFF}]
							  | [\x{20D0}-\x{20FF}]
							  | [\x{FE00}-\x{FE0F}]
							  | [\x{FE20}-\x{FE2F}]
							  | [\x{E0100}-\x{E01EF}]
							)+
						)
						\s*(?=[:{])
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.operator.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.custom.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>name</key>
					<string>meta.definition.operator.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#swift2</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#swift3</string>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>swift2</key>
						<dict>
							<key>begin</key>
							<string>(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.operator.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.operator.end.swift</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>keyword.other.operator.associativity.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(associativity)\s+(left|right)\b</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.integer.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(precedence)\s+([0-9]+)\b</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(assignment)\b</string>
								</dict>
							</array>
						</dict>
						<key>swift3</key>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.other.inherited-class.swift</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#types-precedencegroup</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>match</key>
							<string>(:)\s*((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
						</dict>
					</dict>
				</dict>
				<key>parameter-clause</key>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function-arguments.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function-arguments.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter-clause.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.swift</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>External parameter labels are considered part of the function name</string>
							<key>match</key>
							<string>\b((?!\d)\w[\w\d]*)\b\s+\b((?!\d)\w[\w\d]*)\b(?=\s*:)</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.swift</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>If no external label is given, the name is both the external label and the internal variable name</string>
							<key>match</key>
							<string>\b(((?!\d)\w[\w\d]*))\b(?=\s*:)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<key>precedencegroup</key>
				<dict>
					<key>begin</key>
					<string>\b(precedencegroup)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)\s*(?=\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.precedencegroup.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.precedencegroup.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>name</key>
					<string>meta.definition.precedencegroup.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.precedencegroup.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.precedencegroup.end.swift</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>entity.other.inherited-class.swift</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#types-precedencegroup</string>
												</dict>
											</array>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(higherThan|lowerThan)\s*:\s*((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>keyword.other.operator.associativity.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(associativity)\b(?:\s*:\s*(right|left)\b)?</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>storage.modifier.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>constant.language.boolean.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(assignment)\b(?:\s*:\s*(true|false)\b)?</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<key>protocol</key>
				<dict>
					<key>begin</key>
					<string>\b(protocol)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.$1.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.$1.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>name</key>
					<string>meta.definition.type.protocol.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#inheritance-clause</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.type.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.type.end.swift</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.definition.type.protocol.body.swift</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#nested-braces</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<key>typealias</key>
				<dict>
					<key>begin</key>
					<string>\b(typealias)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)\s*(?=[&lt;=])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.declaration-specifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.typealias.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>name</key>
					<string>meta.definition.typealias.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#generic-parameter-list</string>
						</dict>
					</array>
				</dict>
				<key>types-precedencegroup</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Precedence groups in the standard library</string>
							<key>match</key>
							<string>\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\b</string>
							<key>name</key>
							<string>support.type.swift</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>literals</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#boolean</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnil\b</string>
					<key>name</key>
					<string>constant.language.nil.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>object "literals" used in playgrounds</string>
					<key>match</key>
					<string>\B(?:#colorLiteral|#imageLiteral|#fileLiteral)\b</string>
					<key>name</key>
					<string>support.function.object-literal.swift</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>boolean</key>
				<dict>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.boolean.swift</string>
				</dict>
				<key>numeric</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>0.1, -4_2.5, 6.022e23, 10E-5</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)[0-9][0-9_]*(?:\.[0-9][0-9_]*)?(?:[eE][+\-]?[0-9][0-9_]*)?\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.float.decimal.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>-0x1.ap2_3, 0x31p-4</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)(?:\.\h[\h_]*)?[pP][+\-]?[0-9][0-9_]*\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.float.hexadecimal.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0x1p, 0x1p_2, 0x1.5pa, 0x1.1p+1f, 0x1pz</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)(?:\.\h[\h_]*)?(?:[pP][+\-]?\w*)\b(?!\.[0-9])</string>
							<key>name</key>
							<string>invalid.illegal.numeric.float.invalid-exponent.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0x1.5w (note that 0x1.f may be a valid expression)</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)\.[0-9][\w.]*</string>
							<key>name</key>
							<string>invalid.illegal.numeric.float.missing-exponent.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>-.5, .2f (note that 1.-.5 may be a valid expression)</string>
							<key>match</key>
							<string>(?&lt;=\s|^)\-?\.[0-9][\w.]*</string>
							<key>name</key>
							<string>invalid.illegal.numeric.float.missing-leading-zero.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0b_0_1, 0x_1p+3q</string>
							<key>match</key>
							<string>(\B\-|\b)0[box]_[\h_]*(?:[pPeE][+-]?\w+)?[\w.]+</string>
							<key>name</key>
							<string>invalid.illegal.numeric.leading-underscore.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>tuple positional member: not really a numeric literal, but not invalid</string>
							<key>match</key>
							<string>(?&lt;=[^.]\.)[0-9][0-9_]*\b</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0b010, 0b1_0</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)0b[01][01_]*\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.integer.binary.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0o1, 0o7_3</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)0o[0-7][0-7_]*\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.integer.octal.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>02, 3_456</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)[0-9][0-9_]*\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.integer.decimal.swift</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>0x4, 0xF_7</string>
							<key>match</key>
							<string>(\B\-|\b)(?&lt;![^.]\.)0x\h[\h_]*\b(?!\.[0-9])</string>
							<key>name</key>
							<string>constant.numeric.integer.hexadecimal.swift</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(\B\-|\b)[0-9][\w.]*</string>
							<key>name</key>
							<string>invalid.illegal.numeric.other.swift</string>
						</dict>
					</array>
				</dict>
				<key>string</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>"</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>"</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.swift</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.double.swift</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\r|\n</string>
									<key>name</key>
									<string>invalid.illegal.returns-not-allowed.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\\[0\\tnr"']</string>
									<key>name</key>
									<string>constant.character.escape.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\\u\{\h{1,8}\}</string>
									<key>name</key>
									<string>constant.character.escape.unicode.swift</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.embedded.begin.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>source.swift</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#root</string>
												</dict>
											</array>
										</dict>
										<key>5</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.embedded.end.swift</string>
										</dict>
										<key>6</key>
										<dict>
											<key>name</key>
											<string>source.swift</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(?x)
										(\\\()							# Opening
										(
											(?&lt;parens&gt;
												(
													[^()"]				# Anything except parens
												  | \(					# Matched pairs of parens
													\g&lt;parens&gt;			#  …that can be nested
													\)
												  | "					# Strings
													([^\\]|\\.)*		# Contents allowing for escapes
													"
												)*
											)
										)
										((\)))							# Closing
									</string>
									<key>name</key>
									<string>meta.embedded.line.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\\.</string>
									<key>name</key>
									<string>invalid.illegal.escape-not-recognized</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?=
							\.?
							(
								[./=\-+!*%&lt;&gt;&amp;|^~?]
							  | [\x{00A1}-\x{00A7}]
							  | [\x{00A9}\x{00AB}]
							  | [\x{00AC}\x{00AE}]
							  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
							  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
							  | [\x{2030}-\x{203E}]
							  | [\x{2041}-\x{2053}]
							  | [\x{2055}-\x{205E}]
							  | [\x{2190}-\x{23FF}]
							  | [\x{2500}-\x{2775}]
							  | [\x{2794}-\x{2BFF}]
							  | [\x{2E00}-\x{2E7F}]
							  | [\x{3001}-\x{3003}]
							  | [\x{3008}-\x{3030}]
							)
						)
					</string>
					<key>comment</key>
					<string>This rule helps us speed up the matching.</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>\G(\+\+|\-\-)$</string>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(\+|\-)$</string>
											<key>name</key>
											<string>keyword.operator.arithmetic.unary.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G!$</string>
											<key>name</key>
											<string>keyword.operator.logical.not.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G~$</string>
											<key>name</key>
											<string>keyword.operator.bitwise.not.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.prefix.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Prefix unary operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;=^|[\s(\[{,;:])
								(
									(?!(//|/\*))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?![\s)\]},;:]|\z)
							</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>\G(\+\+|\-\-)$</string>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G!$</string>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.postfix.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Postfix unary operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;!^|[\s(\[{,;:])
								(
									(?!(//|/\*))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?=[\s)\]},;:]|\z)
							</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>\G=$</string>
											<key>name</key>
											<string>keyword.operator.assignment.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(\+|\-|\*|/|%|&lt;&lt;|&gt;&gt;|&amp;|\^|\||&amp;&amp;|\|\|)=$</string>
											<key>name</key>
											<string>keyword.operator.assignment.compound.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(\+|\-|\*|/)$</string>
											<key>name</key>
											<string>keyword.operator.arithmetic.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G&amp;(\+|\-|\*)$</string>
											<key>name</key>
											<string>keyword.operator.arithmetic.overflow.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G%$</string>
											<key>name</key>
											<string>keyword.operator.arithmetic.remainder.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(==|!=|&gt;|&lt;|&gt;=|&lt;=|~=)$</string>
											<key>name</key>
											<string>keyword.operator.comparison.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G\?\?$</string>
											<key>name</key>
											<string>keyword.operator.coalescing.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(&amp;&amp;|\|\|)$</string>
											<key>name</key>
											<string>keyword.operator.logical.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(&amp;|\||\^|&lt;&lt;|&gt;&gt;)$</string>
											<key>name</key>
											<string>keyword.operator.bitwise.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(===|!==)$</string>
											<key>name</key>
											<string>keyword.operator.bitwise.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\G(\?|:)$</string>
											<key>name</key>
											<string>keyword.operator.ternary.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.infix.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Infix operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(
									(?!(//|/\*))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
							</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.prefix.dot.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Dot prefix unary operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;=^|[\s(\[{,;:])
								\.										# Dot
								(
									(?!(//|/\*))
									(
										\.								# Dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?![\s)\]},;:]|\z)
							</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.postfix.dot.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Dot postfix unary operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;!^|[\s(\[{,;:])
								\.										# Dot
								(
									(?!(//|/\*))
									(
										\.								# Dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?=[\s)\]},;:]|\z)
							</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>\G\.\.[.&lt;]$</string>
											<key>name</key>
											<string>keyword.operator.range.swift</string>
										</dict>
										<dict>
											<key>match</key>
											<string>.*</string>
											<key>name</key>
											<string>keyword.operator.custom.infix.dot.swift</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>comment</key>
							<string>Dot infix operator</string>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								\.										# Dot
								(
									(?!(//|/\*))
									(
										\.								# Dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
							</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>root</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#compiler-control</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.swift</string>
	<key>uuid</key>
	<string>8C743E89-9C8D-4833-8149-6500D82AA463</string>
</dict>
</plist>
